(()=>{var e={42035:(e,t,r)=>{"use strict";var o=r(61465);const s=(0,r(40255).ni)({baseUrl:"https://api.github.com/",prepareHeaders:(e,t)=>{let{getState:r}=t;const o=r().sheetStorage.ghToken;return o&&e.append("Authorization","token ".concat(o)),e},cache:"no-cache"}),a=async(e,t,r)=>await s(e,t,r);function n(e){let t=null;return e&&e.split(", ").forEach((e=>{const r=e.split("; ");if('rel="last"'===r[1]){const e=r[0].match(/.*[?&]+page=([0-9]+)/);e&&void 0!==e[1]&&/^\d+$/.test(e[1])&&(t=parseInt(e[1]))}})),t||1}const c=(0,o.LC)({reducerPath:"githubApi",baseQuery:a,tagTypes:["Files","Refs","Pulls"],endpoints:e=>({reposListForUserHeaders:e.query({query:e=>({url:"/users/".concat(e.username,"/repos"),method:"HEAD",params:{type:e.type,sort:e.sort,direction:e.direction,per_page:e.perPage,page:e.page}}),transformResponse(e,t){var r;return{link:(null===t||void 0===t||null===(r=t.response)||void 0===r?void 0:r.headers.get("link"))||void 0}}}),reposListForAuthenticatedUserHeaders:e.query({query:e=>({method:"HEAD",url:"/user/repos",params:{visibility:e.visibility,affiliation:e.affiliation,type:e.type,sort:e.sort,direction:e.direction,per_page:e.perPage,page:e.page,since:e.since,before:e.before}}),transformResponse(e,t){var r;return{link:(null===t||void 0===t||null===(r=t.response)||void 0===r?void 0:r.headers.get("link"))||void 0}}}),searchReposHeaders:e.query({query:e=>({method:"HEAD",url:"/search/repositories",params:{q:e.q,sort:e.sort,order:e.order,per_page:e.perPage,page:e.page}}),transformResponse(e,t){var r;return{link:(null===t||void 0===t||null===(r=t.response)||void 0===r?void 0:r.headers.get("link"))||void 0}}}),reposListBranchesHeaders:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches"),params:{protected:e.protected,per_page:e.perPage,page:e.page}}),transformResponse(e,t){var r;return{link:(null===t||void 0===t||null===(r=t.response)||void 0===r?void 0:r.headers.get("link"))||void 0}}}),reposListAllBranches:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches"),params:{protected:e.protected,per_page:50}}),async onQueryStarted(e,t){let{owner:r,repo:o}=e,{dispatch:s,getState:a,queryFulfilled:i,updateCachedData:u}=t,p=await c.endpoints.reposListBranchesHeaders.initiate({owner:r,repo:o,perPage:50})(s,a,null);if(p.isSuccess){const e=n(p.data.link);try{let t=await i;console.log("reposListAllBranches: got result ",t," lastPage is ",e);let r=[];for(let o=1;o<e;o++)console.log("loading extra branches on page ",o);u((e=>e.concat(r)))}catch(Bo){}}}}),reposMergeWithResponseCode:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/merges"),method:"POST",body:e.body}),transformResponse:(e,t,r)=>{var o;return console.log(t),{status:(null===t||void 0===t||null===(o=t.response)||void 0===o?void 0:o.status)||-1,response:e}}}),reposRenameBranchWithResponseCode:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/merges"),method:"POST",body:e.body}),transformResponse:(e,t,r)=>(console.log(t),{status:0,reponse:void 0})})})}),{useReposListForUserHeadersQuery:i,useReposListForAuthenticatedUserHeadersQuery:u,useSearchReposHeadersQuery:p,useReposListBranchesHeadersQuery:l,useReposListAllBranchesQuery:d}=c,m=c.injectEndpoints({endpoints:e=>({gitignoreGetAllTemplates:e.query({query:()=>({url:"/gitignore/templates"})}),gitignoreGetTemplate:e.query({query:e=>({url:"/gitignore/templates/".concat(e.name)})}),gitCreateBlob:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/git/blobs"),method:"POST",body:e.body})}),gitGetBlob:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/git/blobs/").concat(e.fileSha)})}),gitCreateCommit:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/git/commits"),method:"POST",body:e.body})}),gitGetCommit:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/git/commits/").concat(e.commitSha)})}),gitListMatchingRefs:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/git/matching-refs/").concat(e.ref),params:{per_page:e.perPage,page:e.page}})}),gitGetRef:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/git/ref/").concat(e.ref)})}),gitCreateRef:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/git/refs"),method:"POST",body:e.body}),invalidatesTags:["Refs"]}),gitUpdateRef:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/git/refs/").concat(e.ref),method:"PATCH",body:e.body}),invalidatesTags:["Refs"]}),gitDeleteRef:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/git/refs/").concat(e.ref),method:"DELETE"}),invalidatesTags:["Refs"]}),gitCreateTag:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/git/tags"),method:"POST",body:e.body})}),gitGetTag:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/git/tags/").concat(e.tagSha)})}),gitCreateTree:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/git/trees"),method:"POST",body:e.body})}),gitGetTree:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/git/trees/").concat(e.treeSha),params:{recursive:e.recursive}})})}),overrideExisting:!1}),{useGitignoreGetAllTemplatesQuery:h,useGitignoreGetTemplateQuery:y,useGitCreateBlobMutation:g,useGitGetBlobQuery:b,useGitCreateCommitMutation:w,useGitGetCommitQuery:f,useGitListMatchingRefsQuery:R,useGitGetRefQuery:v,useGitCreateRefMutation:q,useGitUpdateRefMutation:S,useGitDeleteRefMutation:E,useGitCreateTagMutation:P,useGitGetTagQuery:C,useGitCreateTreeMutation:k,useGitGetTreeQuery:T}=m,M=c.injectEndpoints({endpoints:e=>({pullsList:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls"),params:{state:e.state,head:e.head,base:e.base,sort:e.sort,direction:e.direction,per_page:e.perPage,page:e.page}}),providesTags:["Pulls"]}),pullsListWH:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls"),params:{state:e.state,head:e.head,base:e.base,sort:e.sort,direction:e.direction,per_page:e.perPage,page:e.page}}),transformResponse(e,t){var r;let o={};return null===t||void 0===t||null===(r=t.response)||void 0===r||r.headers.forEach(((e,t)=>o[t]=e)),{response:e,headers:o}},providesTags:["Pulls"]}),pullsCreate:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls"),method:"POST",body:e.body}),invalidatesTags:["Pulls"]}),pullsListReviewCommentsForRepo:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/comments"),params:{sort:e.sort,direction:e.direction,since:e.since,per_page:e.perPage,page:e.page}})}),pullsGetReviewComment:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/comments/").concat(e.commentId)})}),pullsUpdateReviewComment:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/comments/").concat(e.commentId),method:"PATCH",body:e.body})}),pullsDeleteReviewComment:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/comments/").concat(e.commentId),method:"DELETE"})}),pullsGet:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber)})}),pullsUpdate:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber),method:"PATCH",body:e.body})}),pullsListReviewComments:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber,"/comments"),params:{sort:e.sort,direction:e.direction,since:e.since,per_page:e.perPage,page:e.page}})}),pullsCreateReviewComment:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber,"/comments"),method:"POST",body:e.body})}),pullsCreateReplyForReviewComment:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber,"/comments/").concat(e.commentId,"/replies"),method:"POST",body:e.body})}),pullsListCommits:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber,"/commits"),params:{per_page:e.perPage,page:e.page}})}),pullsListFiles:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber,"/files"),params:{per_page:e.perPage,page:e.page}})}),pullsCheckIfMerged:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber,"/merge")})}),pullsMerge:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber,"/merge"),method:"PUT",body:e.body}),invalidatesTags:["Files","Pulls"]}),pullsListRequestedReviewers:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber,"/requested_reviewers"),params:{per_page:e.perPage,page:e.page}})}),pullsRequestReviewers:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber,"/requested_reviewers"),method:"POST",body:e.body})}),pullsRemoveRequestedReviewers:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber,"/requested_reviewers"),method:"DELETE",body:e.body})}),pullsListReviews:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber,"/reviews"),params:{per_page:e.perPage,page:e.page}})}),pullsCreateReview:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber,"/reviews"),method:"POST",body:e.body})}),pullsGetReview:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber,"/reviews/").concat(e.reviewId)})}),pullsUpdateReview:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber,"/reviews/").concat(e.reviewId),method:"PUT",body:e.body})}),pullsDeletePendingReview:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber,"/reviews/").concat(e.reviewId),method:"DELETE"})}),pullsListCommentsForReview:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber,"/reviews/").concat(e.reviewId,"/comments"),params:{per_page:e.perPage,page:e.page}})}),pullsDismissReview:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber,"/reviews/").concat(e.reviewId,"/dismissals"),method:"PUT",body:e.body})}),pullsSubmitReview:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber,"/reviews/").concat(e.reviewId,"/events"),method:"POST",body:e.body})}),pullsUpdateBranch:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pulls/").concat(e.pullNumber,"/update-branch"),method:"PUT",body:e.body})})}),overrideExisting:!1}),{usePullsListQuery:A,usePullsCreateMutation:_,usePullsListReviewCommentsForRepoQuery:F,usePullsGetReviewCommentQuery:B,usePullsUpdateReviewCommentMutation:x,usePullsDeleteReviewCommentMutation:G,usePullsGetQuery:L,usePullsUpdateMutation:I,usePullsListReviewCommentsQuery:D,usePullsCreateReviewCommentMutation:Q,usePullsCreateReplyForReviewCommentMutation:U,usePullsListCommitsQuery:O,usePullsListFilesQuery:V,usePullsCheckIfMergedQuery:H,usePullsMergeMutation:N,usePullsListRequestedReviewersQuery:W,usePullsRequestReviewersMutation:j,usePullsRemoveRequestedReviewersMutation:z,usePullsListReviewsQuery:$,usePullsCreateReviewMutation:K,usePullsGetReviewQuery:J,usePullsUpdateReviewMutation:Z,usePullsDeletePendingReviewMutation:X,usePullsListCommentsForReviewQuery:Y,usePullsDismissReviewMutation:ee,usePullsSubmitReviewMutation:te,usePullsUpdateBranchMutation:re}=M,oe=c.injectEndpoints({endpoints:e=>({reposListForOrg:e.query({query:e=>({url:"/orgs/".concat(e.org,"/repos"),params:{type:e.type,sort:e.sort,direction:e.direction,per_page:e.perPage,page:e.page}})}),reposCreateInOrg:e.mutation({query:e=>({url:"/orgs/".concat(e.org,"/repos"),method:"POST",body:e.body})}),reposGet:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo),cache:"reload"})}),reposUpdate:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo),method:"PATCH",body:e.body})}),reposDelete:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo),method:"DELETE"})}),reposListAutolinks:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/autolinks"),params:{page:e.page}})}),reposCreateAutolink:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/autolinks"),method:"POST",body:e.body})}),reposGetAutolink:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/autolinks/").concat(e.autolinkId)})}),reposDeleteAutolink:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/autolinks/").concat(e.autolinkId),method:"DELETE"})}),reposEnableAutomatedSecurityFixes:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/automated-security-fixes"),method:"PUT"})}),reposDisableAutomatedSecurityFixes:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/automated-security-fixes"),method:"DELETE"})}),reposListBranches:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches"),params:{protected:e.protected,per_page:e.perPage,page:e.page}}),providesTags:["Refs"]}),reposGetBranch:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch)})}),reposGetBranchProtection:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection")})}),reposUpdateBranchProtection:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection"),method:"PUT",body:e.body})}),reposDeleteBranchProtection:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection"),method:"DELETE"})}),reposGetAdminBranchProtection:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/enforce_admins")})}),reposSetAdminBranchProtection:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/enforce_admins"),method:"POST"})}),reposDeleteAdminBranchProtection:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/enforce_admins"),method:"DELETE"})}),reposGetPullRequestReviewProtection:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/required_pull_request_reviews")})}),reposUpdatePullRequestReviewProtection:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/required_pull_request_reviews"),method:"PATCH",body:e.body})}),reposDeletePullRequestReviewProtection:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/required_pull_request_reviews"),method:"DELETE"})}),reposGetCommitSignatureProtection:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/required_signatures")})}),reposCreateCommitSignatureProtection:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/required_signatures"),method:"POST"})}),reposDeleteCommitSignatureProtection:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/required_signatures"),method:"DELETE"})}),reposGetStatusChecksProtection:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/required_status_checks")})}),reposUpdateStatusCheckProtection:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/required_status_checks"),method:"PATCH",body:e.body})}),reposRemoveStatusCheckProtection:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/required_status_checks"),method:"DELETE"})}),reposGetAllStatusCheckContexts:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/required_status_checks/contexts")})}),reposAddStatusCheckContexts:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/required_status_checks/contexts"),method:"POST",body:e.body})}),reposSetStatusCheckContexts:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/required_status_checks/contexts"),method:"PUT",body:e.body})}),reposRemoveStatusCheckContexts:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/required_status_checks/contexts"),method:"DELETE",body:e.body})}),reposGetAccessRestrictions:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/restrictions")})}),reposDeleteAccessRestrictions:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/restrictions"),method:"DELETE"})}),reposGetAppsWithAccessToProtectedBranch:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/restrictions/apps")})}),reposAddAppAccessRestrictions:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/restrictions/apps"),method:"POST",body:e.body})}),reposSetAppAccessRestrictions:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/restrictions/apps"),method:"PUT",body:e.body})}),reposRemoveAppAccessRestrictions:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/restrictions/apps"),method:"DELETE",body:e.body})}),reposGetTeamsWithAccessToProtectedBranch:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/restrictions/teams")})}),reposAddTeamAccessRestrictions:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/restrictions/teams"),method:"POST",body:e.body})}),reposSetTeamAccessRestrictions:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/restrictions/teams"),method:"PUT",body:e.body})}),reposRemoveTeamAccessRestrictions:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/restrictions/teams"),method:"DELETE",body:e.body})}),reposGetUsersWithAccessToProtectedBranch:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/restrictions/users")})}),reposAddUserAccessRestrictions:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/restrictions/users"),method:"POST",body:e.body})}),reposSetUserAccessRestrictions:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/restrictions/users"),method:"PUT",body:e.body})}),reposRemoveUserAccessRestrictions:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/protection/restrictions/users"),method:"DELETE",body:e.body})}),reposRenameBranch:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/branches/").concat(e.branch,"/rename"),method:"POST",body:e.body})}),reposCodeownersErrors:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/codeowners/errors"),params:{ref:e.ref}})}),reposListCollaborators:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/collaborators"),params:{affiliation:e.affiliation,per_page:e.perPage,page:e.page}})}),reposCheckCollaborator:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/collaborators/").concat(e.username)})}),reposAddCollaborator:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/collaborators/").concat(e.username),method:"PUT",body:e.body})}),reposRemoveCollaborator:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/collaborators/").concat(e.username),method:"DELETE"})}),reposGetCollaboratorPermissionLevel:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/collaborators/").concat(e.username,"/permission")})}),reposListCommitCommentsForRepo:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/comments"),params:{per_page:e.perPage,page:e.page}})}),reposGetCommitComment:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/comments/").concat(e.commentId)})}),reposUpdateCommitComment:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/comments/").concat(e.commentId),method:"PATCH",body:e.body})}),reposDeleteCommitComment:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/comments/").concat(e.commentId),method:"DELETE"})}),reposListCommits:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/commits"),params:{sha:e.sha,path:e.path,author:e.author,since:e.since,until:e.until,per_page:e.perPage,page:e.page}})}),reposListBranchesForHeadCommit:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/commits/").concat(e.commitSha,"/branches-where-head")})}),reposListCommentsForCommit:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/commits/").concat(e.commitSha,"/comments"),params:{per_page:e.perPage,page:e.page}})}),reposCreateCommitComment:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/commits/").concat(e.commitSha,"/comments"),method:"POST",body:e.body})}),reposListPullRequestsAssociatedWithCommit:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/commits/").concat(e.commitSha,"/pulls"),params:{per_page:e.perPage,page:e.page}})}),reposGetCommit:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/commits/").concat(e.ref),params:{page:e.page,per_page:e.perPage}})}),reposGetCombinedStatusForRef:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/commits/").concat(e.ref,"/status"),params:{per_page:e.perPage,page:e.page}})}),reposListCommitStatusesForRef:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/commits/").concat(e.ref,"/statuses"),params:{per_page:e.perPage,page:e.page}})}),reposGetCommunityProfileMetrics:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/community/profile")})}),reposCompareCommits:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/compare/").concat(e.basehead),params:{page:e.page,per_page:e.perPage}})}),reposGetContent:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/contents/").concat(e.path),params:{ref:e.ref}}),providesTags:["Files"]}),reposCreateOrUpdateFileContents:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/contents/").concat(e.path),method:"PUT",body:e.body}),extraOptions:{maxRetries:0},invalidatesTags:["Files","Refs"]}),reposDeleteFile:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/contents/").concat(e.path),method:"DELETE",body:e.body})}),reposListContributors:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/contributors"),params:{anon:e.anon,per_page:e.perPage,page:e.page}})}),reposListDeployments:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/deployments"),params:{sha:e.sha,ref:e.ref,task:e.task,environment:e.environment,per_page:e.perPage,page:e.page}})}),reposCreateDeployment:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/deployments"),method:"POST",body:e.body})}),reposGetDeployment:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/deployments/").concat(e.deploymentId)})}),reposDeleteDeployment:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/deployments/").concat(e.deploymentId),method:"DELETE"})}),reposListDeploymentStatuses:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/deployments/").concat(e.deploymentId,"/statuses"),params:{per_page:e.perPage,page:e.page}})}),reposCreateDeploymentStatus:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/deployments/").concat(e.deploymentId,"/statuses"),method:"POST",body:e.body})}),reposGetDeploymentStatus:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/deployments/").concat(e.deploymentId,"/statuses/").concat(e.statusId)})}),reposCreateDispatchEvent:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/dispatches"),method:"POST",body:e.body})}),reposGetAllEnvironments:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/environments")})}),reposGetEnvironment:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/environments/").concat(e.environmentName)})}),reposCreateOrUpdateEnvironment:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/environments/").concat(e.environmentName),method:"PUT",body:e.body})}),reposDeleteAnEnvironment:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/environments/").concat(e.environmentName),method:"DELETE"})}),reposListForks:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/forks"),params:{sort:e.sort,per_page:e.perPage,page:e.page}})}),reposCreateFork:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/forks"),method:"POST",body:e.body})}),reposListWebhooks:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/hooks"),params:{per_page:e.perPage,page:e.page}})}),reposCreateWebhook:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/hooks"),method:"POST",body:e.body})}),reposGetWebhook:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/hooks/").concat(e.hookId)})}),reposUpdateWebhook:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/hooks/").concat(e.hookId),method:"PATCH",body:e.body})}),reposDeleteWebhook:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/hooks/").concat(e.hookId),method:"DELETE"})}),reposGetWebhookConfigForRepo:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/hooks/").concat(e.hookId,"/config")})}),reposUpdateWebhookConfigForRepo:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/hooks/").concat(e.hookId,"/config"),method:"PATCH",body:e.body})}),reposListWebhookDeliveries:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/hooks/").concat(e.hookId,"/deliveries"),params:{per_page:e.perPage,cursor:e.cursor}})}),reposGetWebhookDelivery:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/hooks/").concat(e.hookId,"/deliveries/").concat(e.deliveryId)})}),reposRedeliverWebhookDelivery:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/hooks/").concat(e.hookId,"/deliveries/").concat(e.deliveryId,"/attempts"),method:"POST"})}),reposPingWebhook:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/hooks/").concat(e.hookId,"/pings"),method:"POST"})}),reposTestPushWebhook:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/hooks/").concat(e.hookId,"/tests"),method:"POST"})}),reposListInvitations:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/invitations"),params:{per_page:e.perPage,page:e.page}})}),reposUpdateInvitation:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/invitations/").concat(e.invitationId),method:"PATCH",body:e.body})}),reposDeleteInvitation:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/invitations/").concat(e.invitationId),method:"DELETE"})}),reposListDeployKeys:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/keys"),params:{per_page:e.perPage,page:e.page}})}),reposCreateDeployKey:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/keys"),method:"POST",body:e.body})}),reposGetDeployKey:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/keys/").concat(e.keyId)})}),reposDeleteDeployKey:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/keys/").concat(e.keyId),method:"DELETE"})}),reposListLanguages:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/languages")})}),reposEnableLfsForRepo:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/lfs"),method:"PUT"})}),reposDisableLfsForRepo:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/lfs"),method:"DELETE"})}),reposMergeUpstream:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/merge-upstream"),method:"POST",body:e.body})}),reposMerge:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/merges"),method:"POST",body:e.body})}),reposGetPages:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pages")})}),reposCreatePagesSite:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pages"),method:"POST",body:e.body})}),reposUpdateInformationAboutPagesSite:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pages"),method:"PUT",body:e.body})}),reposDeletePagesSite:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pages"),method:"DELETE"})}),reposListPagesBuilds:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pages/builds"),params:{per_page:e.perPage,page:e.page}})}),reposRequestPagesBuild:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pages/builds"),method:"POST"})}),reposGetLatestPagesBuild:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pages/builds/latest")})}),reposGetPagesBuild:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pages/builds/").concat(e.buildId)})}),reposGetPagesHealthCheck:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/pages/health")})}),reposGetReadme:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/readme"),params:{ref:e.ref}})}),reposGetReadmeInDirectory:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/readme/").concat(e.dir),params:{ref:e.ref}})}),reposListReleases:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/releases"),params:{per_page:e.perPage,page:e.page}})}),reposCreateRelease:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/releases"),method:"POST",body:e.body})}),reposGetReleaseAsset:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/releases/assets/").concat(e.assetId)})}),reposUpdateReleaseAsset:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/releases/assets/").concat(e.assetId),method:"PATCH",body:e.body})}),reposDeleteReleaseAsset:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/releases/assets/").concat(e.assetId),method:"DELETE"})}),reposGenerateReleaseNotes:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/releases/generate-notes"),method:"POST",body:e.body})}),reposGetLatestRelease:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/releases/latest")})}),reposGetReleaseByTag:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/releases/tags/").concat(e.tag)})}),reposGetRelease:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/releases/").concat(e.releaseId)})}),reposUpdateRelease:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/releases/").concat(e.releaseId),method:"PATCH",body:e.body})}),reposDeleteRelease:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/releases/").concat(e.releaseId),method:"DELETE"})}),reposListReleaseAssets:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/releases/").concat(e.releaseId,"/assets"),params:{per_page:e.perPage,page:e.page}})}),reposUploadReleaseAsset:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/releases/").concat(e.releaseId,"/assets"),method:"POST",body:e.body,params:{name:e.name,label:e.label}})}),reposGetCodeFrequencyStats:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/stats/code_frequency")})}),reposGetCommitActivityStats:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/stats/commit_activity")})}),reposGetContributorsStats:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/stats/contributors")})}),reposGetParticipationStats:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/stats/participation")})}),reposGetPunchCardStats:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/stats/punch_card")})}),reposCreateCommitStatus:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/statuses/").concat(e.sha),method:"POST",body:e.body})}),reposListTags:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/tags"),params:{per_page:e.perPage,page:e.page}})}),reposDownloadTarballArchive:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/tarball/").concat(e.ref)})}),reposListTeams:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/teams"),params:{per_page:e.perPage,page:e.page}})}),reposGetAllTopics:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/topics"),params:{page:e.page,per_page:e.perPage}})}),reposReplaceAllTopics:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/topics"),method:"PUT",body:e.body})}),reposGetClones:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/traffic/clones"),params:{per:e.per}})}),reposGetTopPaths:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/traffic/popular/paths")})}),reposGetTopReferrers:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/traffic/popular/referrers")})}),reposGetViews:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/traffic/views"),params:{per:e.per}})}),reposTransfer:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/transfer"),method:"POST",body:e.body})}),reposCheckVulnerabilityAlerts:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/vulnerability-alerts")})}),reposEnableVulnerabilityAlerts:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/vulnerability-alerts"),method:"PUT"})}),reposDisableVulnerabilityAlerts:e.mutation({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/vulnerability-alerts"),method:"DELETE"})}),reposDownloadZipballArchive:e.query({query:e=>({url:"/repos/".concat(e.owner,"/").concat(e.repo,"/zipball/").concat(e.ref)})}),reposCreateUsingTemplate:e.mutation({query:e=>({url:"/repos/".concat(e.templateOwner,"/").concat(e.templateRepo,"/generate"),method:"POST",body:e.body})}),reposListPublic:e.query({query:e=>({url:"/repositories",params:{since:e.since}})}),reposListForAuthenticatedUser:e.query({query:e=>({url:"/user/repos",params:{visibility:e.visibility,affiliation:e.affiliation,type:e.type,sort:e.sort,direction:e.direction,per_page:e.perPage,page:e.page,since:e.since,before:e.before}})}),reposCreateForAuthenticatedUser:e.mutation({query:e=>({url:"/user/repos",method:"POST",body:e.body})}),reposListInvitationsForAuthenticatedUser:e.query({query:e=>({url:"/user/repository_invitations",params:{per_page:e.perPage,page:e.page}})}),reposAcceptInvitationForAuthenticatedUser:e.mutation({query:e=>({url:"/user/repository_invitations/".concat(e.invitationId),method:"PATCH"})}),reposDeclineInvitationForAuthenticatedUser:e.mutation({query:e=>({url:"/user/repository_invitations/".concat(e.invitationId),method:"DELETE"})}),reposListForUser:e.query({query:e=>({url:"/users/".concat(e.username,"/repos"),params:{type:e.type,sort:e.sort,direction:e.direction,per_page:e.perPage,page:e.page}})})}),overrideExisting:!1}),{useReposListForOrgQuery:se,useReposCreateInOrgMutation:ae,useReposGetQuery:ne,useReposUpdateMutation:ce,useReposDeleteMutation:ie,useReposListAutolinksQuery:ue,useReposCreateAutolinkMutation:pe,useReposGetAutolinkQuery:le,useReposDeleteAutolinkMutation:de,useReposEnableAutomatedSecurityFixesMutation:me,useReposDisableAutomatedSecurityFixesMutation:he,useReposListBranchesQuery:ye,useReposGetBranchQuery:ge,useReposGetBranchProtectionQuery:be,useReposUpdateBranchProtectionMutation:we,useReposDeleteBranchProtectionMutation:fe,useReposGetAdminBranchProtectionQuery:Re,useReposSetAdminBranchProtectionMutation:ve,useReposDeleteAdminBranchProtectionMutation:qe,useReposGetPullRequestReviewProtectionQuery:Se,useReposUpdatePullRequestReviewProtectionMutation:Ee,useReposDeletePullRequestReviewProtectionMutation:Pe,useReposGetCommitSignatureProtectionQuery:Ce,useReposCreateCommitSignatureProtectionMutation:ke,useReposDeleteCommitSignatureProtectionMutation:Te,useReposGetStatusChecksProtectionQuery:Me,useReposUpdateStatusCheckProtectionMutation:Ae,useReposRemoveStatusCheckProtectionMutation:_e,useReposGetAllStatusCheckContextsQuery:Fe,useReposAddStatusCheckContextsMutation:Be,useReposSetStatusCheckContextsMutation:xe,useReposRemoveStatusCheckContextsMutation:Ge,useReposGetAccessRestrictionsQuery:Le,useReposDeleteAccessRestrictionsMutation:Ie,useReposGetAppsWithAccessToProtectedBranchQuery:De,useReposAddAppAccessRestrictionsMutation:Qe,useReposSetAppAccessRestrictionsMutation:Ue,useReposRemoveAppAccessRestrictionsMutation:Oe,useReposGetTeamsWithAccessToProtectedBranchQuery:Ve,useReposAddTeamAccessRestrictionsMutation:He,useReposSetTeamAccessRestrictionsMutation:Ne,useReposRemoveTeamAccessRestrictionsMutation:We,useReposGetUsersWithAccessToProtectedBranchQuery:je,useReposAddUserAccessRestrictionsMutation:ze,useReposSetUserAccessRestrictionsMutation:$e,useReposRemoveUserAccessRestrictionsMutation:Ke,useReposRenameBranchMutation:Je,useReposCodeownersErrorsQuery:Ze,useReposListCollaboratorsQuery:Xe,useReposCheckCollaboratorQuery:Ye,useReposAddCollaboratorMutation:et,useReposRemoveCollaboratorMutation:tt,useReposGetCollaboratorPermissionLevelQuery:rt,useReposListCommitCommentsForRepoQuery:ot,useReposGetCommitCommentQuery:st,useReposUpdateCommitCommentMutation:at,useReposDeleteCommitCommentMutation:nt,useReposListCommitsQuery:ct,useReposListBranchesForHeadCommitQuery:it,useReposListCommentsForCommitQuery:ut,useReposCreateCommitCommentMutation:pt,useReposListPullRequestsAssociatedWithCommitQuery:lt,useReposGetCommitQuery:dt,useReposGetCombinedStatusForRefQuery:mt,useReposListCommitStatusesForRefQuery:ht,useReposGetCommunityProfileMetricsQuery:yt,useReposCompareCommitsQuery:gt,useReposGetContentQuery:bt,useReposCreateOrUpdateFileContentsMutation:wt,useReposDeleteFileMutation:ft,useReposListContributorsQuery:Rt,useReposListDeploymentsQuery:vt,useReposCreateDeploymentMutation:qt,useReposGetDeploymentQuery:St,useReposDeleteDeploymentMutation:Et,useReposListDeploymentStatusesQuery:Pt,useReposCreateDeploymentStatusMutation:Ct,useReposGetDeploymentStatusQuery:kt,useReposCreateDispatchEventMutation:Tt,useReposGetAllEnvironmentsQuery:Mt,useReposGetEnvironmentQuery:At,useReposCreateOrUpdateEnvironmentMutation:_t,useReposDeleteAnEnvironmentMutation:Ft,useReposListForksQuery:Bt,useReposCreateForkMutation:xt,useReposListWebhooksQuery:Gt,useReposCreateWebhookMutation:Lt,useReposGetWebhookQuery:It,useReposUpdateWebhookMutation:Dt,useReposDeleteWebhookMutation:Qt,useReposGetWebhookConfigForRepoQuery:Ut,useReposUpdateWebhookConfigForRepoMutation:Ot,useReposListWebhookDeliveriesQuery:Vt,useReposGetWebhookDeliveryQuery:Ht,useReposRedeliverWebhookDeliveryMutation:Nt,useReposPingWebhookMutation:Wt,useReposTestPushWebhookMutation:jt,useReposListInvitationsQuery:zt,useReposUpdateInvitationMutation:$t,useReposDeleteInvitationMutation:Kt,useReposListDeployKeysQuery:Jt,useReposCreateDeployKeyMutation:Zt,useReposGetDeployKeyQuery:Xt,useReposDeleteDeployKeyMutation:Yt,useReposListLanguagesQuery:er,useReposEnableLfsForRepoMutation:tr,useReposDisableLfsForRepoMutation:rr,useReposMergeUpstreamMutation:or,useReposMergeMutation:sr,useReposGetPagesQuery:ar,useReposCreatePagesSiteMutation:nr,useReposUpdateInformationAboutPagesSiteMutation:cr,useReposDeletePagesSiteMutation:ir,useReposListPagesBuildsQuery:ur,useReposRequestPagesBuildMutation:pr,useReposGetLatestPagesBuildQuery:lr,useReposGetPagesBuildQuery:dr,useReposGetPagesHealthCheckQuery:mr,useReposGetReadmeQuery:hr,useReposGetReadmeInDirectoryQuery:yr,useReposListReleasesQuery:gr,useReposCreateReleaseMutation:br,useReposGetReleaseAssetQuery:wr,useReposUpdateReleaseAssetMutation:fr,useReposDeleteReleaseAssetMutation:Rr,useReposGenerateReleaseNotesMutation:vr,useReposGetLatestReleaseQuery:qr,useReposGetReleaseByTagQuery:Sr,useReposGetReleaseQuery:Er,useReposUpdateReleaseMutation:Pr,useReposDeleteReleaseMutation:Cr,useReposListReleaseAssetsQuery:kr,useReposUploadReleaseAssetMutation:Tr,useReposGetCodeFrequencyStatsQuery:Mr,useReposGetCommitActivityStatsQuery:Ar,useReposGetContributorsStatsQuery:_r,useReposGetParticipationStatsQuery:Fr,useReposGetPunchCardStatsQuery:Br,useReposCreateCommitStatusMutation:xr,useReposListTagsQuery:Gr,useReposDownloadTarballArchiveQuery:Lr,useReposListTeamsQuery:Ir,useReposGetAllTopicsQuery:Dr,useReposReplaceAllTopicsMutation:Qr,useReposGetClonesQuery:Ur,useReposGetTopPathsQuery:Or,useReposGetTopReferrersQuery:Vr,useReposGetViewsQuery:Hr,useReposTransferMutation:Nr,useReposCheckVulnerabilityAlertsQuery:Wr,useReposEnableVulnerabilityAlertsMutation:jr,useReposDisableVulnerabilityAlertsMutation:zr,useReposDownloadZipballArchiveQuery:$r,useReposCreateUsingTemplateMutation:Kr,useReposListPublicQuery:Jr,useReposListForAuthenticatedUserQuery:Zr,useReposCreateForAuthenticatedUserMutation:Xr,useReposListInvitationsForAuthenticatedUserQuery:Yr,useReposAcceptInvitationForAuthenticatedUserMutation:eo,useReposDeclineInvitationForAuthenticatedUserMutation:to,useReposListForUserQuery:ro}=oe;function oo(e){return(null!==e&&"object"===typeof e||"function"===typeof e)&&("number"===typeof e.status&&"data"in e||"FETCH_ERROR"===e.status&&"string"===typeof e.error||"PARSING_ERROR"===e.status&&"number"===typeof e.originalStatus&&"string"===typeof e.data&&"string"===typeof e.error||"CUSTOM_ERROR"===e.status&&"string"===typeof e.error)}function so(e){return(null!==e&&"object"===typeof e||"function"===typeof e)&&"string"===typeof e.message&&"string"===typeof e.documentation_url}function ao(e){if(oo(e)){const t=e,{status:r}=t;if("FETCH_ERROR"===r)return"Fetch error: ".concat(t.error);if("PARSING_ERROR"===r)return"Parsing error: ".concat(t.error);if("CUSTOM_ERROR"===r)return"Custom error: ".concat(t.error);if(Number.isInteger(r)){if(so(t.data)){const e=t.data;return"".concat(t.status,": ").concat(e.message)}return"".concat(t.status,": Unknown error")}return"".concat(t.status,": Unknown error")}return function(e){return!oo(e)}(e)?"Serialized error":"Unknown error"}var no=r(34520),co=r.n(no),io=r(58134),uo=r(95273);const po=(0,uo.createSlice)({name:"githubStorage",initialState:{status:"not_initialized"},reducers:{setToken:(e,t)=>{e.ghToken=t.payload},processResult:(e,t)=>{const{errorMessage:r,newEngineState:o}=t.payload;void 0===r?e.status="task_finished":(e.errorMessage=r,e.status="error"),void 0!==o&&(e.storageEngine.state=o)},updateState:(e,t)=>{void 0!==e.storageEngine?e.storageEngine.state=t.payload:console.error("SheetStorage: storage engine is not initialized")},init:(e,t)=>{const{type:r,initialState:o}=t.payload;e.storageEngine={type:r,state:o}}}}),lo={...po.actions},mo=(0,uo.configureStore)({reducer:{[c.reducerPath]:c.reducer,sheetStorage:po.reducer},middleware:e=>e().concat(c.middleware)});function ho(e){return e.split("/").map((e=>encodeURIComponent(e))).reduce(((e,t)=>"".concat(e,"/").concat(t)))}function yo(e){const{path:t,ref:r}=e;return"".concat(r,"_session_").concat((e=>{var t;const r=null===(t=e.split("/").pop())||void 0===t?void 0:t.split(".");let o=r?1===r.length?r[0]:r.slice(0,-1).join("."):"";return o=o.replace("..",""),o=o.replace("@{",""),o=o.replace("~",""),o=o.replace("^",""),o=o.replace(":",""),o=o.replace("?",""),o=o.replace("*",""),o=o.replace("[",""),o=o.replace(" ","-"),o})(t),"_").concat(co()(t))}const go={ghState:e=>void 0!==e.sheetStorage.storageEngine&&"github"===e.sheetStorage.storageEngine.type?e.sheetStorage.storageEngine.state:void 0};function bo(e){return lo.updateState(e)}function wo(e){return async(t,r)=>{const{owner:o,repo:s,ref:a}=e;let c=[];try{c=await function(e,t){return async(r,o)=>{var s;const a=await oe.endpoints.reposListBranchesHeaders.initiate({owner:e,repo:t,perPage:100},{forceRefetch:!0})(r,o,null);if(a.isError)throw Error("unexpected response");const c=n(null===(s=a.data)||void 0===s?void 0:s.link);let i=[];for(let n=1;n<=c;n++){const s=await oe.endpoints.reposListBranches.initiate({owner:e,repo:t,perPage:100,page:n},{forceRefetch:!0})(r,o,null);if(void 0===s.data)throw Error("unexpected response");i=i.concat(s.data)}return i}}(o,s)(t,r)}catch(b){return console.log("branch listing error ",c),{error:"API call (listAllRepoBranches) failed, try again."}}const i=yo(e),u=c.filter((e=>e.name===a))[0],p=c.filter((e=>e.name===i))[0];if(void 0===u)return{error:"The requested work sheet was not found in the repository. Check the file name, path, and branch."};console.log("branches: ",c),console.log("expected session branch",i),console.log("session filter: ",c.filter((e=>e.name===i))),console.log("sheetBranch is ",u),console.log("session branch is ",p);const l={...e,ref:void 0!==p?p.name:u.name},d=await(m=l,async(e,t)=>{m.path=ho(m.path);const r=await oe.endpoints.reposGetContent.initiate(m,{forceRefetch:!0})(e,t,null);if(!r.isSuccess)return{error:r.error?ao(r.error):"GitHub API call error while loading the worksheet"};const{data:o}=r;if(!("content"in o))return{error:"Worksheet path does not refer to a file."};try{return{content:io.DS.decode(o.content),sha:o.sha}}catch(b){return{error:"Base64 content decoding failed"}}})(t,r);var m;if("error"in d){const{error:e}=d;return{error:e||"Failed to load file"}}const{content:h,sha:y}=d,g={mergeState:"idle",location:e,baseBranch:u.name,baseCommitSha:u.commit.sha,sha:y};if(void 0===p||(console.log("reusing existing session"),g.sessionBranch={name:p.name,commitSha:p.commit.sha}),t(lo.init({type:"github",initialState:g})),void 0!==g.sessionBranch){const e=await fo()(t,r);console.log("isSessionBranchMerged: ",e)}return{json:h,sheetId:co()(JSON.stringify({storageType:"github",location:e})),custom:{canMerge:void 0!==p}}}}function fo(){return async(e,t)=>{const r=go.ghState(t());if(console.log("testSessionBranch"),void 0===r||void 0===r.sessionBranch)throw Error("isSessionBranchMerged called on uninitialized ghStorage");const{owner:o,repo:s}=r.location,{baseBranch:a,sessionBranch:c}=r,i=await function(e,t,r,o){return async(s,a)=>{let c=1,i=[];for(let u=1;u<=c;u++){const p=await M.endpoints.pullsListWH.initiate({owner:e,repo:t,state:r,perPage:100},{forceRefetch:o})(s,a,null);if(void 0===p.data)return{error:p.error};1===u&&(c=n(p.data.headers.link)),i=i.concat(p.data.response)}return{result:i}}}(o,s,"closed",!0)(e,t);if(void 0!==i.error)return{error:i.error};const u=i.result;console.log("searching for pull from ".concat(a," to ").concat(c.name," with sha ").concat(c.commitSha)),console.log("pulls: ",u);for(let n of u)if("closed"===n.state&&n.base.ref===a&&n.head.ref===c.name&&n.head.sha===c.commitSha)return{result:!0};return{result:!1}}}function Ro(e){return async(t,r)=>{try{await new Promise(((e,t)=>{const r=()=>{const r=mo.getState().sheetStorage.storageEngine.state.mergeState;return"idle"===r||"success"===r||"merge_waiting"===r?(e(),!0):"error"===r&&(t(),!0)};if(!1===r()){const e=mo.subscribe((()=>{r()&&e()}))}}))}catch(n){}const o=()=>r().sheetStorage.storageEngine.state;if(void 0===o().sessionBranch){const e=await(async(e,t)=>{const r=t().sheetStorage.storageEngine.state,{location:o,baseCommitSha:s}=r,{owner:a,repo:n}=o,c="refs/heads/".concat(yo(o)),i=await m.endpoints.gitCreateRef.initiate({owner:a,repo:n,body:{ref:c,sha:s}})(e,t,null);if("data"in i)return{response:i.data};{const{error:e}=i;return oo(e)&&"number"===typeof e.status&&so(e.data)&&422===e.status&&"Reference already exists"===e.data.message?{saveError:{type:"background_update",message:e.data.message}}:{saveError:{type:"unknown_error",message:ao(e)}}}})(t,r);if(void 0!==e.saveError){const r={...o(),saveError:e.saveError};return void t(lo.processResult({errorMessage:"Creation of session branch failed: ".concat(e.saveError.message),newEngineState:r}))}console.log("created session branch ",e.response);const s={...o(),sessionBranch:{name:yo(o().location),commitSha:e.response.object.sha}};t(lo.updateState(s))}const s=await fo()(t,r);if(void 0!==s.error){const e={...o(),saveError:{type:"unknown_error",message:"API call failed: ".concat(ao(s.error))}};return void t(lo.processResult({errorMessage:"API call failed: ".concat(ao(s.error)),newEngineState:e}))}if(!0===s.result){const e={...o(),saveError:{type:"merged_session",message:"Merged session branch must be deleted"}};return void t(lo.processResult({errorMessage:"Merged session branch must be deleted",newEngineState:e}))}console.log("isSessionBranchMerged: ",s);const a=await function(e){return async(t,r)=>{const o=r().sheetStorage.storageEngine.state,{owner:s,repo:a,path:n}=o.location,{sessionBranch:c,sha:i}=o,u={owner:s,repo:a,path:ho(n),body:{message:e.message,content:io.DS.encode(JSON.stringify(e.contentObj,null,2)),sha:i,branch:c.name}},p=await oe.endpoints.reposCreateOrUpdateFileContents.initiate(u)(t,r,null);if("error"in p){const{error:e}=p;return oo(e)&&"number"===typeof e.status&&so(e.data)&&409===e.status?{saveError:{type:"background_update",message:e.data.message}}:{saveError:{type:"unknown_error",message:ao(e)}}}return{response:p}}}(e)(t,r);if(void 0!==a.saveError){const e={...o(),saveError:a.saveError};t(lo.processResult({errorMessage:"Commit failed: ".concat(a.saveError.message),newEngineState:e}))}else{const e=r().sheetStorage.storageEngine.state,o=a.response.data.content.sha,s={...e.sessionBranch,commitSha:a.response.data.commit.sha},n={...e,sha:o,sessionBranch:s};t(lo.processResult({newEngineState:n}))}}}function vo(e){const t=mo.dispatch,r=mo.getState,o={canMerge:!1};async function s(){const e=await(async(e,t)=>{const r=()=>t().sheetStorage.storageEngine.state,{owner:o,repo:s,path:a}=r().location,n=a.replace(/^([^/]*\/)*([^/]+)\.workbook$/,"$2");if(void 0===r().sessionBranch){const t={type:"no_session_branch",message:"There is no session branch therefore no changes to merge"};return e(bo({...r(),mergeState:"error",mergeError:t})),!1}const c=r().sessionBranch,i=r().baseBranch;e(bo({...r(),mergeState:"merge_waiting"})),e(bo({...r(),mergeState:"merging"}));const u=await M.endpoints.pullsList.initiate({owner:o,repo:s,state:"open",perPage:100},{forceRefetch:!0})(e,t,null);if(!("data"in u)||void 0===u.data){const t={type:"api_call_failed",message:void 0!==u.error?ao(u.error):"",call:"pullsList"};return e(bo({...r(),mergeState:"error",mergeError:t})),!1}const p=u.data;console.log("Pulls list: ",p);const l=p.filter((e=>e.base.ref===i&&e.head.ref===c.name));if(console.log("filtered pr: ",l),l.length>1){const t={type:"multiple_pulls",message:"The repository is in an inconsistent state. There are multiple pull requests open from the session branch to the base branch."};return e(bo({...r(),mergeState:"error",mergeError:t})),!1}let d,h;if(1===l.length)console.log("PR already created"),d=l[0].number,h=l[0].html_url;else{const a=await M.endpoints.pullsCreate.initiate({owner:o,repo:s,body:{title:"".concat(n,": Worksheet session"),head:"refs/heads/".concat(c.name),base:"refs/heads/".concat(i)}})(e,t,null);if(!("data"in a)){const t={type:"api_call_failed",message:ao(a.error),call:"pullsCreate"};return e(bo({...r(),mergeState:"error",mergeError:t})),!1}console.log("created PR: ",a.data),d=a.data.number,h=a.data.html_url}const y=await M.endpoints.pullsMerge.initiate({owner:o,repo:s,pullNumber:d,body:{commit_title:"".concat(n,": Worksheet session ").concat(o,"/").concat(s,"#").concat(d),commit_message:"See https://github.com/".concat(o,"/").concat(s,"/pull/").concat(d),merge_method:"squash"}})(e,t,null);if(!("data"in y)){const{error:t}=y;let o;return o=oo(t)&&"number"===typeof t.status&&so(t.data)&&405===t.status&&"Pull Request is not mergeable"===t.data.message?{type:"not_mergable",message:ao(y.error),url:h}:{type:"api_call_failed",message:ao(y.error),call:"pullsMerge"},e(bo({...r(),mergeState:"error",mergeError:o})),!1}console.log("merge success",y.data);const g=await m.endpoints.gitDeleteRef.initiate({owner:o,repo:s,ref:"heads/".concat(ho(c.name))})(e,t,null);return"data"in g||console.log("Failed to delete old branch"),console.log("old branch delete success",g),e(lo.updateState({...r(),sessionBranch:void 0,mergeState:"success",mergeError:void 0,baseCommitSha:y.data.sha})),y.data})(t,r);if(!1===e){var s,a;const e=null===(s=r().sheetStorage.storageEngine)||void 0===s?void 0:s.state,{baseBranch:t,mergeState:n,mergeError:c,sessionBranch:i}=e;return o.mergeErr={baseBranch:t,mergeState:n,mergeError:c,sessionBranch:i},{result:"error",errorMessage:(null===(a=e.mergeError)||void 0===a?void 0:a.message)||"save error",customState:o}}return o.canMerge=!1,{result:"success",customState:o}}function a(){return((e,t)=>{const r=go.ghState(t());void 0!==r&&e(bo({...r,sessionBranch:void 0}))})(t,r),{result:"success"}}return{runCommand:async e=>{switch(e.type){case"init":return function(e){if(!("ghToken"in e.custom))throw new Error("Missing github access token in github engine initialization");return t(lo.setToken(e.custom.ghToken)),{result:"success",customState:o}}(e.payload);case"load":return async function(e){const s=await wo(e)(t,r);return void 0!==s.error?{result:"error",errorMessage:s.error}:(o.canMerge=s.custom.canMerge,{result:"success",data:{json:s.json,sheetId:s.sheetId},customState:o})}(e.payload);case"clearSessionBranch":return a();default:throw new Error("Unknown command in github engine: "+e.type)}},runTask:async e=>{switch(e.type){case"autosave":return async function(e){var s,a,n,c;await Ro(e)(t,r);const i=r();return"task_finished"===i.sheetStorage.status?(o.canMerge=!0,{result:"success",customState:o}):(o.autosaveErr={location:null===(s=i.sheetStorage.storageEngine)||void 0===s?void 0:s.state.location,sessionBranch:null===(a=i.sheetStorage.storageEngine)||void 0===a?void 0:a.state.sessionBranch,baseBranch:null===(n=i.sheetStorage.storageEngine)||void 0===n?void 0:n.state.baseBranch,saveError:null===(c=i.sheetStorage.storageEngine)||void 0===c?void 0:c.state.saveError},{result:"error",errorMessage:i.sheetStorage.errorMessage||"err",customState:o})}(e.payload);case"merge":return s();default:throw new Error("Unknown task in github engine: "+e.type)}}}}function qo(e,t,r){return e.isFail()?e:r.isFail()?r:_o.Success(Object.assign({},e.value,{[t.toString()]:r.value}))}function So(e,t,r){if(e.isFail())return e;return qo(e,t,r(e.value))}function Eo(e,t){return e.isFail()?e:t}function Po(e,t){return e.isFail()?e:t(e.value)}function Co(e,t){if(e.isSuccess())return e;const r=t(e.value);return _o.Error(r)}function ko(e,t,r){return new To((async o=>{const s=e instanceof Promise?await e:e;if(s.isFail())return void o(s);const a=await r(s.value);o(qo(s,t,a))}))}class To extends Promise{assignV(e,t){return new To((async r=>{r(qo(await(this),e,t))}))}assignF(e,t){return new To((async r=>{r(So(await(this),e,t))}))}retV(e){return new To((async t=>{t(Eo(await(this),e))}))}retF(e){return new To((async t=>{t(Po(await(this),e))}))}asyncAssignF(e,t){return ko(this,e,t)}transformError(e){return new To((async t=>{t(Co(await(this),e))}))}}class Mo{get value(){return this._value}isSuccess(){return!0}isFail(){return!1}constructor(e){this._value=void 0,this._value=e}assignV(e,t){return qo(this,e,t)}assignF(e,t){return So(this,e,t)}retV(e){return Eo(this,e)}retF(e){return Po(this,e)}asyncAssignF(e,t){return ko(this,e,t)}transformError(e){return Co(this,e)}}class Ao{get value(){return this._error}isSuccess(){return!1}isFail(){return!0}constructor(e){this._error=void 0,this._error=e}assignV(e,t){return qo(this,e,t)}assignF(e,t){return So(this,e,t)}retV(e){return Eo(this,e)}retF(e){return Po(this,e)}asyncAssignF(e,t){return ko(this,e,t)}transformError(e){return Co(this,e)}}class _o{static Success(e){return new Mo(e)}static Error(e){return new Ao(e)}static do(){return _o.Success({})}}function Fo(e){return _o.Success(e)}function Bo(e){return _o.Error(e)}let xo=_o.do().retV(Math.random()>.5?_o.Success(1):_o.Error("out of luck"));_o.do().assignV("x",xo);_o.do().assignV("x",Fo(4)).assignF("y",(e=>xo)),_o.do().assignV("x",Fo(4)).asyncAssignF("y",(async e=>xo)),function(){const e=e=>{if(!e)throw new Error("assertion failed")};let t=_o.do().assignV("x",_o.Success(5));e(t.isSuccess()&&5===t.value.x),t=_o.do().assignF("x",(()=>_o.Success(10))),e(t.isSuccess()&&10===t.value.x);let r=_o.do().assignF("x",(()=>_o.Success(10))).retV(_o.Success(5));e(r.isSuccess()&&5===r.value),r=_o.do().assignF("x",(()=>_o.Success(10))).retF((()=>_o.Success(10))),e(r.isSuccess()&&10===r.value);let o=_o.do().assignF("x",(()=>_o.Success(10))).retF((()=>_o.Error(10)));e(o.isFail()&&10===o.value),o=_o.do().assignF("x",(()=>_o.Error(10))).retF((()=>_o.Error(10))),e(o.isFail()&&10===o.value),o=_o.do().assignV("x",_o.Error(10)).retF((()=>_o.Error(10))),e(o.isFail()&&10===o.value),o=_o.do().assignF("x",(()=>_o.Success(10))).retV(_o.Error(11)),e(o.isFail()&&11===o.value),o=_o.do().assignF("x",(()=>_o.Success(10))).retV(_o.Error(11)).transformError((e=>2*e)),e(o.isFail()&&22===o.value),(async()=>{let t=await _o.do().asyncAssignF("x",(async e=>_o.Success(1)));e(t.isSuccess()&&1===t.value.x);let r=await _o.do().assignV("x",_o.Success(2)).asyncAssignF("y",(async e=>_o.Success(3)));e(r.isSuccess()&&2===r.value.x&&3===r.value.y);let o=await _o.do().assignV("x",_o.Success(4)).asyncAssignF("y",(async e=>_o.Success(5))).assignV("z",_o.Success(6));e(o.isSuccess()&&4===o.value.x&&5===o.value.y&&6===o.value.z)})()}();let Go=_o.do().assignV("x",_o.Success(5)).assignF("y",(e=>e.x>5?_o.Success(e.x*e.x):_o.Error(-1))).transformError((e=>"".concat(e)));if(Go.isSuccess()){Go.value}else{Go.value}_o.do().assignV("x",_o.Success(5)).retV(_o.Error(!1)),_o.do().assignF("x",(e=>_o.Success(5))),_o.do().assignV("x",_o.Error("10")).assignV("ww",_o.Error("")).assignF("y",(e=>e.x>10?_o.Success(5):_o.Success("a"))).assignF("z",(e=>"string"===typeof e.y?_o.Success(e.y):_o.Error("wrong"))).assignF("w",(e=>5===e.y?_o.Success(e.y):_o.Error("10"))).retF((e=>{e.x,e.ww,e.y,e.z,e.w;return""===e.z?_o.Error("5"):_o.Success(!0)})),_o.do().assignF("x",(e=>_o.Error("10"))).assignF("y",(e=>_o.Error("10"))).assignF("z",(e=>{e.x,e.y;return _o.Success(!0)}));_o.do().assignF("x",(e=>_o.Error("10"))).assignF("y",(e=>_o.Error("10"))).assignF("z",(e=>{e.x,e.y;return _o.Success(!0)})).retV(_o.Error("true"));_o.do().assignF("x",(e=>_o.Error({code:5,message:"fail"}))),_o.do().assignV("x",_o.Error("10")),_o.do().assignV("x",_o.Error("10")),_o.do().assignV("x",_o.Error("10")),_o.do().assignV("x",_o.Error("10")),_o.do().assignF("x",(e=>_o.Error("10"))),_o.do().assignV("x",_o.Error(5)),_o.do().assignV("x",Math.random()>.5?_o.Success(1):_o.Error("out of luck")).assignV("y",_o.Error(10)),_o.do().assignF("x",(()=>Math.random()>.5?_o.Success(1):_o.Error("out of luck"))).assignV("y",_o.Error(10)),_o.do().assignV("x",_o.Error("true")).assignV("y",_o.Error(4)),_o.do().assignV("x",_o.Error(!0)).assignV("y",_o.Error(4)),_o.do().assignV("x",_o.Error(!0)).assignV("y",_o.Error(4)).assignV("z",_o.Error(!1)),_o.do().assignV("x",_o.Error(!0)).assignV("y",_o.Error("4")).assignV("z",_o.Error("false")),_o.do().assignV("x",_o.Error(!0)).assignV("y",_o.Success("4")).assignV("z",_o.Error(!1)),_o.do().assignF("x",(()=>_o.Success(4))).assignV("y",_o.Error(4)),_o.do().retV(_o.Error("no")).assignV("x",_o.Error(5)),_o.do().retV(_o.Error("no")).assignV("x",_o.Error(7)),_o.do().retF((()=>_o.Error("no"))).assignV("x",_o.Error(5)),_o.do().retF((()=>_o.Error("no"))).assignV("x",_o.Error(7));var Lo=r(1192);async function Io(e){try{const t=await e;return _o.Success(t)}catch(t){if("name"in t&&"message"in t){if("HttpError"===t.name){const e=t;return _o.Error({reason:"api_call_failed",message:"HTTP error: ".concat(e.request.method," ").concat(e.request.url," failed (").concat(e.message,")"),apiError:e})}return _o.Error({reason:"api_call_failed",message:"Exception during API call: ".concat(t.name,": ").concat(t.message)})}return _o.Error({reason:"api_call_failed",message:"API call ended with unknown error: ".concat(t)})}}class Do{constructor(e,t){this.changeState=void 0,this.customState=void 0,this.octokit=void 0,this.octokit=new Lo.vd({auth:e,retry:{doNotRetry:[404,405,409,422]},request:{retries:0,retryAfter:1},throttle:{enabled:!1}}),this.changeState=t,this.customState={canMerge:!1,undeletedMergedSession:!1,baseBranch:"will be set"}}async open(e){const{owner:t,repo:r,path:o,ref:s}=e;return _o.do().assignV("branches",await Io(this.octokit.paginate(this.octokit.rest.repos.listBranches,{owner:t,repo:r,per_page:100,headers:{"If-None-Match":""}}))).assignV("sheetBranch",await this.getSheetBranches2(e)).asyncAssignF("undeletedMergedSession",(async e=>_o.Success(!1))).asyncAssignF("file",(async e=>{const{baseBranch:s,sessionBranch:a}=e.sheetBranch,n=void 0===a?s.name:a.name;return Io(this.octokit.rest.repos.getContent({owner:t,repo:r,path:o,ref:n,headers:{"If-None-Match":""}}))})).retF((e=>{const{file:t}=e,{baseBranch:r,sessionBranch:o}=e.sheetBranch;if(!("content"in t.data))return Bo({reason:"not_found",message:"Workbook path refers to a directory."});try{return Fo({baseBranch:r,sessionBranch:o,content:io.DS.decode(t.data.content),sha:t.data.sha,undeletedMergedSession:false})}catch(s){return Bo({reason:"load_error",message:"Base64 content decoding failed."})}})).transformError((e=>({...e,apiError:void 0})))}async getSheetBranches2(e){const{owner:t,repo:r}=e,o=e.ref,s=yo(e);return _o.do().assignV("branches",await Io(this.octokit.graphql("\n        query getSheetBranches($owner: String!, $repo: String!, $baseBranch: String!, $sessionBranch: String!) {\n          repository(owner: $owner, name: $repo) {\n            baseBranch: ref(qualifiedName: $baseBranch) {\n              name\n              target {\n                ... on Commit {\n                  oid\n                }\n              }\n            }\n            sessionBranch: ref(qualifiedName: $sessionBranch) {\n              name\n              target {\n                ... on Commit {\n                  oid\n                }\n              }\n            }\n          }\n        }      \n        ",{owner:t,repo:r,baseBranch:o,sessionBranch:s,headers:{"If-None-Match":""}}))).retF((e=>{const{baseBranch:t,sessionBranch:r}=e.branches.repository;return null===t?_o.Error({reason:"not_found",message:"The requested work sheet was not found in the repository. Check the file name, path, and branch."}):_o.Success({baseBranch:{headId:t.target.oid,name:t.name},sessionBranch:null!==r?{name:r.name,headId:r.target.oid}:void 0})}))}async createSessionBranch(e){const{addr:t,baseCommitId:r}=e,{owner:o,repo:s}=t,a="refs/heads/".concat(yo(e.addr));return _o.do().assignV("create",await Io(this.octokit.rest.git.createRef({owner:o,repo:s,ref:a,sha:r}))).retF((e=>_o.Success({name:yo(t),headId:e.create.data.object.sha}))).transformError((e=>{if("api_call_failed"===e.reason){var t;const{apiError:r}=e;if(422===(null===r||void 0===r?void 0:r.status)&&"Reference already exists"===(null===r||void 0===r||null===(t=r.response)||void 0===t?void 0:t.data).message){return{reason:"background_update",message:""}}}return e}))}async isBranchMerged2(e){const{addr:t,commitId:r}=e,{owner:o,repo:s}=t;return _o.do().assignV("pull",await Io(this.octokit.graphql("\n        query getPullRequestForCommit($owner: String!, $repo: String!, $commitId: GitObjectID!) {\n          repository(owner: $owner, name: $repo) {\n            object(oid: $commitId) {\n              ... on Commit {\n                associatedPullRequests(first: 1) {\n                  nodes {\n                    state,\n                    headRefOid\n                  }\n                }\n              }\n            }\n          }\n        }\n        ",{owner:o,repo:s,commitId:r,headers:{"If-None-Match":""}}))).retF((e=>{console.log(e);return void 0!==e.pull.repository.object.associatedPullRequests.nodes.find((e=>"MERGED"===e.state&&e.headRefOid===r))?_o.Success(!0):_o.Success(!1)}))}async isBranchMerged(e){const{addr:t,baseBranch:r,branch:o}=e,{owner:s,repo:a}=t,{name:n,commitId:c}=o,i=performance.now();return _o.do().assignV("pulls",await Io(this.octokit.paginate(this.octokit.rest.pulls.list,{owner:s,repo:a,state:"closed",per_page:100,headers:{"If-None-Match":""}}))).retF((e=>{const{pulls:t}=e;for(let o of t)if("closed"===o.state&&o.base.ref===r&&o.head.ref===n&&o.head.sha===c)return console.log("IT TOOK",performance.now()-i),_o.Success(!0);return console.log("IT TOOK",performance.now()-i),_o.Success(!1)}))}async commit(e){const{addr:t,branch:r,commitId:o,content:s,fileHash:a,message:n}=e,{owner:c,repo:i,path:u}=t;return console.log("in commit"),_o.do().assignV("mergedSession",await this.isBranchMerged2({addr:t,commitId:o})).retF((e=>!0===e.mergedSession?_o.Error({reason:"merged_session",message:"Session branch was merged, but not deleted"}):_o.Success({}))).asyncAssignF("apiResult",(e=>Io(this.octokit.rest.repos.createOrUpdateFileContents({owner:c,repo:i,path:ho(u),message:n,content:s,sha:a,branch:r})))).retF((e=>_o.Success({newFileHash:e.apiResult.data.content.sha,newHeadId:e.apiResult.data.commit.sha}))).transformError((e=>{if("api_call_failed"===e.reason){const{apiError:t}=e;if(409===(null===t||void 0===t?void 0:t.status))return{reason:"background_update",message:"Workbook file was updated in the background"}}return e})).transformError((e=>({...e,apiError:void 0})))}async deleteMergedSession(e){const{addr:t,sessionBranch:r}=e,{owner:o,repo:s}=t;return _o.do().assignV("deleteResult",await Io(this.octokit.rest.git.deleteRef({owner:o,repo:s,ref:"heads/".concat(ho(r))}))).retV(_o.Success(!0))}async mergeSession(e){const{addr:t,sourceBranch:r,targetBranch:o}=e,{owner:s,repo:a,path:n}=t,c=n.replace(/^([^/]*\/)*([^/]+)\.workbook$/,"$2");let i=await _o.do().assignV("pulls",await Io(this.octokit.paginate(this.octokit.rest.pulls.list,{owner:s,repo:a,state:"open",per_page:100,headers:{"If-None-Match":""}}))).asyncAssignF("createdPull",(async e=>{const{pulls:t}=e,n=t.filter((e=>e.base.ref===o&&e.head.ref===r.name));return n.length>1?Bo({reason:"multiple_pulls",message:"The repository is in an inconsistent state. There are multiple pull requests open from the session branch to the base branch."}):1==n.length?Fo({pullNumber:n[0].number,pullUrl:n[0].html_url,created:!0}):(await Io(this.octokit.rest.pulls.create({owner:s,repo:a,title:"".concat(c,": Worksheet session"),head:"refs/heads/".concat(r.name),base:"refs/heads/".concat(o)}))).retF((e=>Fo({pullNumber:e.data.number,pullUrl:e.data.html_url})))})).asyncAssignF("mergeResult",(async e=>{console.log("merging");let t=(await Io(this.octokit.rest.pulls.merge({owner:s,repo:a,pull_number:e.createdPull.pullNumber,commit_title:"".concat(c,": Workbook session ").concat(s,"/").concat(a,"#").concat(e.createdPull.pullNumber),commit_message:"See https://github.com/".concat(s,"/").concat(a,"/pull/").concat(e.createdPull.pullNumber),merge_method:"squash"}))).transformError((t=>{if(console.log("merge error",t),"api_call_failed"===t.reason){const{apiError:r}=t;if(405===(null===r||void 0===r?void 0:r.status))return console.log("transforming error"),{reason:"not_mergable",message:"",pullUrl:e.createdPull.pullUrl}}return t}));return console.log("merging ended"),t})).asyncAssignF("deleteResult",(async e=>{await Io(this.octokit.rest.git.deleteRef({owner:s,repo:a,ref:"heads/".concat(ho(r.name))}));return Fo(!0)})).retF((e=>_o.Success(e.mergeResult.data.sha))).transformError((e=>({...e,apiError:void 0})));return console.log("merging function ended"),i}}class Qo{constructor(e,t){this.context=void 0,this.stateName=void 0,this.context=e,this.stateName=t}}class Uo extends Qo{constructor(e){super(e,"Initialized"),this.context.customState={canMerge:!1,undeletedMergedSession:!1,baseBranch:"",sessionBranch:""}}async open(e){return _o.do().assignV("data",await this.context.open(e)).retF((t=>{const{sessionBranch:r,baseBranch:o,sha:s,content:a,undeletedMergedSession:n}=t.data;this.context.customState={canMerge:void 0!==r&&!1===n,undeletedMergedSession:n,baseBranch:o.name,sessionBranch:null===r||void 0===r?void 0:r.name},this.context.changeState(n?new Oo(this.context,{addr:e,baseBranch:o,sessionBranch:r.name,fileHash:s}):void 0!==r?new Ho(this.context,e,o,r,s):new Vo(this.context,e,o,s));let c=e.path.split("/").splice(-1,1)[0];return _o.Success({customState:this.context.customState,data:{filename:c,json:a,sheetId:co()(JSON.stringify({storageType:"github",location:e}))}})})).transformError((e=>({customError:e,customState:this.context.customState})))}async autosave(e){throw new Error("Invalid action")}async merge(){throw new Error("Invalid action")}async deleteMergedSession(){throw new Error("Invalid action")}}class Oo extends Qo{constructor(e,t){super(e,"UndeletedSession"),this.stateInfo=void 0,this.stateInfo=t,this.context.customState.undeletedMergedSession=!0}open(e){const t=new Uo(this.context);return this.context.changeState(t),t.open(e)}async autosave(e){return _o.Error({customError:{reason:"merged_session",message:"Session branch was merged and must be deleted"},customState:this.context.customState})}merge(){throw new Error("Invalid action")}async deleteMergedSession(){return(await this.context.deleteMergedSession({addr:this.stateInfo.addr,sessionBranch:this.stateInfo.sessionBranch})).retF((e=>(this.context.customState.undeletedMergedSession=!1,this.context.customState.canMerge=!1,this.context.changeState(new Vo(this.context,this.stateInfo.addr,this.stateInfo.baseBranch,this.stateInfo.fileHash)),_o.Success({customState:this.context.customState})))).transformError((e=>({...e,apiError:void 0}))).transformError((e=>({customError:e})))}}class Vo extends Qo{constructor(e,t,r,o){super(e,"SessionLess"),this.addr=void 0,this.baseBranch=void 0,this.fileHash=void 0,this.addr=t,this.baseBranch=r,this.fileHash=o}async open(e){throw new Error("Invalid action")}async autosave(e){return await _o.do().assignV("sessionBranch",await this.context.createSessionBranch({addr:this.addr,baseCommitId:this.baseBranch.headId})).transformError((e=>({customError:{...e,apiError:void 0},customState:this.context.customState}))).asyncAssignF("autosave",(async t=>{this.context.customState.canMerge=!0;const r=new Ho(this.context,this.addr,this.baseBranch,t.sessionBranch,this.fileHash);return this.context.changeState(r),r.autosave(e)})).retF((e=>Fo(e.autosave)))}async merge(){throw new Error("Invalid action")}async deleteMergedSession(){throw new Error("Invalid action")}}class Ho extends Qo{constructor(e,t,r,o,s){super(e,"SessionFull"),this.addr=void 0,this.baseBranch=void 0,this.sessionBranch=void 0,this.fileHash=void 0,this.addr=t,this.baseBranch=r,this.sessionBranch=o,this.fileHash=s}async open(e){throw new Error("Invalid action")}async autosave(e){return _o.do().assignV("commit",await this.context.commit({addr:this.addr,message:e.message,content:io.DS.encode(e.serialized),branch:this.sessionBranch.name,commitId:this.sessionBranch.headId,fileHash:this.fileHash})).retF((e=>{const{newFileHash:t,newHeadId:r}=e.commit;return this.fileHash=t,this.sessionBranch.headId=r,this.context.customState.canMerge=!0,_o.Success({customState:this.context.customState})})).transformError((e=>("merged_session"===e.reason&&this.context.changeState(new Oo(this.context,{addr:this.addr,baseBranch:this.baseBranch,sessionBranch:this.sessionBranch.name,fileHash:this.fileHash})),{customError:e,customState:this.context.customState})))}async merge(){return _o.do().assignV("mergeResult",await this.context.mergeSession({addr:this.addr,sourceBranch:this.sessionBranch,targetBranch:this.baseBranch.name})).retF((e=>(console.log("Merge task successful"),this.context.customState.canMerge=!1,this.context.changeState(new Vo(this.context,this.addr,{...this.baseBranch,headId:e.mergeResult},this.fileHash)),_o.Success({customState:this.context.customState})))).transformError((e=>(console.log("Merge task ended with error",e),{customError:e,customState:this.context.customState})))}async deleteMergedSession(){throw new Error("Invalid action")}}class No{constructor(e){this.state=void 0,this.context=void 0,this.context=new Do(e,(e=>{this.state=e})),this.state=new Uo(this.context)}async openCmd(e){return this.state.open(e)}async deleteMergedSessionCmd(){return this.state.deleteMergedSession()}async autosaveTask(e){return this.state.autosave(e)}async mergeTask(){return this.state.merge()}}function Wo(e){return e.isSuccess()?{result:"success",...e.value}:{result:"error",errorMessage:e.value.customError.message,customState:e.value.customState,customError:e.value.customError}}let jo;self.onmessage=async e=>{const{msg:t,requestId:r}=e.data;if("runCommand"===t.type&&"init"===t.command.type)switch(t.command.payload.engineType){case"github":jo=vo(t.command.payload);break;case"github1":jo=function(e){const t=new No(e.custom.ghToken);return{runCommand:async e=>{switch(e.type){case"load":return Wo(await t.openCmd(e.payload));case"init":return{result:"success"};case"deleteMergedSession":return Wo(await t.deleteMergedSessionCmd());default:throw new Error("Unknown command in github engine: "+e.type)}},runTask:async e=>{switch(e.type){case"autosave":return Wo(await t.autosaveTask(e.payload));case"merge":return Wo(await t.mergeTask());default:throw new Error("Unknown task in github engine: "+e.type)}}}}(t.command.payload);break;default:throw new Error("Unknown engine type")}if("runTask"===t.type&&"autosave"===t.task.type){const e=t.task;e.payload.serialized=(o=e.payload.contentObj,JSON.stringify(o,null,2))}var o;if("runCommand"===t.type){const e=await jo.runCommand(t.command);postMessage({requestId:r,result:e})}else if("runTask"===t.type){const e=await jo.runTask(t.task);postMessage({requestId:r,result:e})}}},5696:()=>{}},t={};function r(o){var s=t[o];if(void 0!==s)return s.exports;var a=t[o]={exports:{}};return e[o].call(a.exports,a,a.exports,r),a.exports}r.m=e,r.x=()=>{var e=r.O(void 0,[22],(()=>r(42035)));return e=r.O(e)},(()=>{var e=[];r.O=(t,o,s,a)=>{if(!o){var n=1/0;for(p=0;p<e.length;p++){o=e[p][0],s=e[p][1],a=e[p][2];for(var c=!0,i=0;i<o.length;i++)(!1&a||n>=a)&&Object.keys(r.O).every((e=>r.O[e](o[i])))?o.splice(i--,1):(c=!1,a<n&&(n=a));if(c){e.splice(p--,1);var u=s();void 0!==u&&(t=u)}}return t}a=a||0;for(var p=e.length;p>0&&e[p-1][2]>a;p--)e[p]=e[p-1];e[p]=[o,s,a]}})(),r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.f={},r.e=e=>Promise.all(Object.keys(r.f).reduce(((t,o)=>(r.f[o](e,t),t)),[])),r.u=e=>"static/js/"+e+".d726223b.chunk.js",r.miniCssF=e=>{},r.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"===typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.p="/workbook/",(()=>{var e={420:1};r.f.i=(t,o)=>{e[t]||importScripts(r.p+r.u(t))};var t=self.webpackChunkworkbook=self.webpackChunkworkbook||[],o=t.push.bind(t);t.push=t=>{var s=t[0],a=t[1],n=t[2];for(var c in a)r.o(a,c)&&(r.m[c]=a[c]);for(n&&n(r);s.length;)e[s.pop()]=1;o(t)}})(),(()=>{var e=r.x;r.x=()=>r.e(22).then(e)})();r.x()})();
//# sourceMappingURL=420.a6dc4af0.chunk.js.map